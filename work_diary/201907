0712
1. 学习了标签模板 Tagged Template Literals。
把模板字符串紧跟在函数名后面，函数调用的一种特殊形式，styled-components背后的黑魔法。写了很久的styled-components却没有思考过究竟是个什么东西。
const logArgs = (...args) => console.log(...args)
const favoriteFood = 'pizza'
logArgs(`I like ${favoriteFood}.`) // -> I like pizza.
logArgs`I like ${favoriteFood}.` // -> ["I like ", "."] "pizza"

例子：
const Button = styled.button`
  background-color: papayawhip;
  border-radius: 3px;
  color: palevioletred;
`
<Button>Hi Dad!</Button>
styled.button其实是一个函数，调用之后返回了一个新的组件，所以可以在其他任何地方使用这个组件。
注：之前好像看到过，每调用一次styled.button，styled-components内部都会有一个计数器加1，是组件id，componentId,然后怎样来着？？


0713
1. 继续学习文章 The magic behind 💅 styled-components （https://mxstbr.blog/2016/11/styled-components-magic-explained/）
const execFuncArgs = (...args) => args.forEach(arg => {
  if (typeof arg === 'function') {
    arg()
  }
})
execFuncArgs(`Hi, ${() => { console.log('Executed!') }}`)
// 参数`Hi, ${() => { console.log('Executed!') }}`不是一个函数，所以什么都不会发生
execFuncArgs`Hi, ${() => { console.log('Executed!') }}`
// 第一个参数['Hi, ', ''] ，第二个参数是函数() => { console.log('Executed!') }，运行之后输出Executed。

2. 对象的==不会强制类型转换？
function checkAge(data) {
  if (data === { age: 18 }) {
    console.log("You are an adult!");
  } else if (data == { age: 18 }) {
    console.log("You are still an adult.");
  } else {
    console.log(`Hmm.. You don't have an age I guess`);
  }
}
checkAge({ age: 18 });
// Hmm.. You don't have an age I guess

3. 扩展运算符返回的是一个包含参数的数组，而typeof 数组是object
function getAge(...args) {
  console.log(typeof args);
}
getAge(21);
// "object"

4. cool_secret可以访问多长时间?
sessionStorage.setItem("cool_secret", 123);
A：永远，数据不会丢失。
B：用户关闭选项卡时。
C：当用户关闭整个浏览器时，不仅是选项卡。
D：用户关闭计算机时。
答案: B

5. const obj = { a: "one", b: "two", a: "three" };
console.log(obj);

A: { a: "one", b: "two" }
B: { b: "two", a: "three" }
C: { a: "three", b: "two" }
D: SyntaxError

答案: C
如果对象有两个具有相同名称的键，则将替前面的键。它仍将处于第一个位置，但具有最后指定的值。


0716
1. String.prototype.giveLydiaPizza = () => {
  return "Just give Lydia pizza already!";
};
const name = "Lydia";
name.giveLydiaPizza();

A: "Just give Lydia pizza already!"
B: TypeError: not a function
C: SyntaxError
D: undefined

答案: A
String是一个内置的构造函数，我们可以为它添加属性。 我刚给它的原型添加了一个方法。 原始类型的字符串自动转换为字符串对象，由字符串原型函数生成。 因此，所有字符串（字符串对象）都可以访问该方法！
译者注：
当使用基本类型的字符串调用giveLydiaPizza时，实际上发生了下面的过程：
创建一个String的包装类型实例
在实例上调用giveLydiaPizza方法
销毁实例

2.
const a = {};
const b = { key: "b" };
const c = { key: "c" };
a[b] = 123;
a[c] = 456;
console.log(a[b]);

A: 123
B: 456
C: undefined
D: ReferenceError

答案: B
对象键自动转换为字符串。我们试图将一个对象设置为对象a的键，其值为123。
但是，当对象自动转换为字符串化时，它变成了[Object object]。 所以我们在这里说的是a["Object object"] = 123。 然后，我们可以尝试再次做同样的事情。 c对象同样会发生隐式类型转换。那么，a["Object object"] = 456。
然后，我们打印a[b]，它实际上是a["Object object"]。 我们将其设置为456，因此返回456。

3.
JavaScript中只有6个假值：
undefined
null
NaN
0
'' (empty string)
false

new Number(0) 和 new Boolean(false)都是真值


0717
1. 看完了 [[译] 送你 43 道 JavaScript 面试题](https://juejin.im/post/5d0644976fb9a07ed064b0ca)的题目
2. 感觉猎头提了几个很好的问题，明天看一看
    ebay前端ecg面试分享
    - React 视图更新机制
    - React 的state为什么异步设置
    - function A() 和 let A = function() 的区别
    - 变量提升
    - 什么是静态方法
    - 箭头函数和普通函数的区别
    - es 5 设置类和es6设置类
    - this指向

    1.promise用法，怎么异步转同步，除了generator，async还有别的吗
    2.原生JS实现数据单向绑定，
    3.express中间件的写法，
    4.用了哪些数据库，
    5.let和var区别，  
    6闭包
    7一个变量怎么会被垃圾回收机制回收



